generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model PublicUsers {
  id            String    @id @default(uuid())
  name          String
  email         String?   @unique
  password      String?
  bio           String?  @db.Text
  user_name     String?   @unique  
  emailVerified Boolean @map("email_verified") @default(false)
  image         String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  posts Posts[]
  like  Like[]

  userOne Message[] @relation("userOne")
  userTwo Message[] @relation("userTwo")

  messageSender DirectMessage[]


  @@map("public_users")

}

model Posts {
  id        String     @id @default(uuid())
  text      String     @db.Char(255)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user_id   String
  user      PublicUsers @relation(fields: [user_id], references: [id], onDelete: Cascade)

  like Like[]
}

model Like {
  id      String @id @default(uuid())
  user_id String
  post_id String

  user PublicUsers @relation(fields: [user_id], references: [id], onDelete: Cascade)
  post Posts      @relation(fields: [post_id], references: [id], onDelete: Cascade)

  @@unique([user_id, post_id])
}

model Message {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userOne_id String
  userOne    PublicUsers @relation("userOne", fields: [userOne_id], references: [id], onDelete: Cascade)

  userTwo_id String
  userTwo    PublicUsers @relation("userTwo", fields: [userTwo_id], references: [id], onDelete: Cascade)

  directMessage DirectMessage[]

  @@unique([userOne_id, userTwo_id])
}

model DirectMessage {
  id String @id @default(uuid())
  content String @db.VarChar(255)
  fileUrl String? @db.VarChar(255)
  senderId String
  sender PublicUsers @relation(fields: [senderId], references: [id], onDelete: Cascade)


  messageId String
  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model User {
  id            String    @id @default(uuid())
  name          String
  email         String?   @unique
  user_name     String?   @unique
  password      String?
  emailVerified DateTime? @map("email_verified")
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model Account {
  id            String    @id @default(uuid())
  userId            String   @map("user_id")
  type              String?
  provider          String
  providerAccountId String   @map("provider_account_id")
  token_type        String?
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  scope             String?
  id_token          String?  @db.Text
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id            String    @id @default(uuid())
  userId       String?  @map("user_id")
  sessionToken String   @unique @map("session_token") @db.Text
  accessToken  String?  @map("access_token") @db.Text
  expires      DateTime
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("sessions")
}

model VerificationRequest {
  id            String    @id @default(uuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}
